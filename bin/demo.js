// Generated by Haxe
(function (console) { "use strict";
var EReg = function(r,opt) {
	opt = opt.split("u").join("");
	this.r = new RegExp(r,opt);
};
EReg.prototype = {
	replace: function(s,by) {
		return s.replace(this.r,by);
	}
};
var Main = function() {
	var options = { suggestions : ["Apple","Banana","Carrot","Peach","Pear","Turnip"]};
	var input = window.document.querySelector("input.fancify");
	this.search = new fancy_Search(input,options);
};
Main.main = function() {
	new Main();
};
var fancy_Search = function(el,options) {
	this.input = el;
	if(options.suggestions != null) this.suggestions = options.suggestions; else this.suggestions = [];
	if(options.filterFn != null) this.filterFn = options.filterFn; else this.filterFn = fancy_Search.defaultFilterer;
	if(options.classes != null) this.classes = options.classes; else this.classes = { };
	if(this.classes.input != null) this.classes.input = this.classes.input; else this.classes.input = "fs-search-input";
	if(this.classes.inputFocus != null) this.classes.inputFocus = this.classes.inputFocus; else this.classes.inputFocus = "fs-search-input-focus";
	fancy_util_Dom.addClass(this.input,this.classes.input);
	fancy_util_Dom.on(this.input,"focus",$bind(this,this.onSearchFocus));
	fancy_util_Dom.on(this.input,"blur",$bind(this,this.onSearchBlur));
};
fancy_Search.defaultFilterer = function(suggestion,search) {
	return suggestion.indexOf(search) >= 0;
};
fancy_Search.prototype = {
	onSearchFocus: function(e) {
		fancy_util_Dom.addClass(this.input,this.classes.inputFocus);
	}
	,onSearchBlur: function(e) {
		fancy_util_Dom.removeClass(this.input,this.classes.inputFocus);
	}
};
var fancy_util_Dom = function() { };
fancy_util_Dom.addClass = function(el,className) {
	el.className += " " + className;
};
fancy_util_Dom.removeClass = function(el,className) {
	var regex = new EReg("(?:^|\\s)(" + className + ")(?!\\S)","g");
	el.className = regex.replace(el.className,"");
};
fancy_util_Dom.on = function(el,eventName,callback) {
	el.addEventListener(eventName,callback);
};
var $_, $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = function(){ return f.method.apply(f.scope, arguments); }; f.scope = o; f.method = m; o.hx__closures__[m.__id__] = f; } return f; }
Main.main();
})(typeof console != "undefined" ? console : {log:function(){}});
